{"version":3,"sources":["Constants.ts","systems/PhysicsSystem.ts","systems/CameraMovementSystem.ts","systems/BlockGenerationSystem.ts","systems/BlockRenderSystem.ts","systems/PlayerMovementSystem.ts","systems/PlayerRenderSystem.ts","systems/BlockRemovalSystem.ts","AssetManager.ts","PlayerState.ts","systems/BackgroundRenderSystem.ts","systems/SmokeRenderSystem.ts","systems/StarRenderSystem.ts","systems/StarCollisionSystem.ts","systems/AlienSystem.ts","systems/AlienRenderSystem.ts","index.tsx"],"names":["Constants","CAMERA_WIDTH","CAMERA_HEIGHT","GAP","GRAVITY","PLAYER_WIDTH","PLAYER_HEIGHT","PLAYER_SCALE","JUMP_FORCE","RUN_FORCE","STAR_SIZE","TRANSITION_DURATION","ALIEN_SPAWNING_TIME","ALIEN_WIDTH","ALIEN_SPEED","ALIEN_YS","ALIEN_HEIGHT","TOTAL_BLOCK_HEIGHT","BLOCK_BLOCK_SIZE","BLOCK_SIZE","BLOCK_OFFSET_Y","PhysicsSystem","Inject","this","physicsWorld","Step","world","delta","System","CameraMovementSystem","camPos","viewport","getCamera","getPosition","setPosition","playerPos","x","y","BlockGenerationSystem","generatedStep","w","h","type","bodyDef","b2BodyDef","b2BodyType","b2_staticBody","position","Set","body","CreateBody","SetUserData","shape","b2PolygonShape","SetAsBox","CreateFixture","blocks","push","generateBlocks","currentStep","Math","floor","special","fixDef","b2FixtureDef","isSensor","starObject","active","m_userData","stars","offsetX","first","patternType","random","patterns","length","starPattern","starPatterns","pattern","cell","createBox","specialGenerated","star","createStar","aliens","time","hit","map","s","grid","split","xs","ys","xss","parseInt","yss","newXss","newYss","undefined","parseFloat","BlockRenderSystem","batch","whiteTex","atlas","regions","createBatch","gl","createWhiteTexture","assetManager","getAtlas","findRegions","setProjection","combined","begin","box","draw","end","PlayerMovementSystem","playerBody","pressed","jumpLeft","gameOver","zeroCenter","runImpulse","jumpImpulse","b2_dynamicBody","fixedRotation","b2CircleShape","sensorShape","userData","sensorShape2","fixDef2","ContactListener","movementSystem","movementSytem","contact","otherFixture","fixA","GetFixtureA","fixB","GetFixtureB","IsSensor","GetUserData","GetBody","playerState","changeAction","stunnedDuration","processJumpable","processObstacle","eventEmitter","emit","b2ContactListener","SetContactListener","appliedStun","GetLinearVelocity","ApplyLinearImpulse","v","inputHandler","isTouched","bodyPos","GetPosition","set","PlayerRenderSystem","animations","animationFrameDuration","run","jump","doubleJump","hurt","createAnimation","action","state","animName","frameDuration","frames","slice","process","playMode","PlayMode","LOOP","NORMAL","getAnimation","getKeyFrame","stateTime","transitionTime","BlockRemovalSystem","i","block","DestroyBody","splice","AssetManager","promises","atlases","Map","textures","done","path","promise","loadAtlas","then","get","loadTexture","Promise","all","PlayerState","states","stateIndex","indexOf","index","changeState","BackgroundRenderSystem","getTexture","bg","drawHeight","drawWidth","height","width","offset","fixedCamera","drawBackground","drawCloud1","drawCloud2","drawCity1","drawCity2","city","cloud","gap","SmokeRenderSystem","StarRenderSystem","starAnimation","specialAnimations","elapsed","getCurrentStateIndex","StarCollisionSystem","subscription","addListener","starFixture","removeStar","nextState","remove","AlienSystem","alien","py","AlienRenderSystem","forEach","a","EventEmitter","stage","createStage","canvas","getCanvas","info","getInfo","createViewport","pixelRatio","getContext","createViewportAwareInputHandler","createOrthoCamera","addCamera","update","innerHTML","finishLoading","createNewWorld","b2World","gameWorld","World","playerPosition","Vector2","register","addSystem","dispose","setTimeout","clearColor","loop","createGameLoop","clear","COLOR_BUFFER_BIT","setDelta","processActiveSystem","processPassiveSystem","setInterval","getFps","init"],"mappings":"2NAAqBA,E,kCAAAA,EACIC,aAAe,EADnBD,EAEIE,cAAgB,EAFpBF,EAGIG,IAAM,EAHVH,EAIII,QAAU,GAJdJ,EAKIK,aAAe,GALnBL,EAMIM,cAAgB,GANpBN,EAOIO,aAAe,EAPnBP,EAQIQ,YAAc,GARlBR,EASIS,UAAY,EAThBT,EAUIU,UAAY,GAVhBV,EAYIW,oBAAsB,IAZ1BX,EAcIY,oBAAsB,GAd1BZ,EAeIa,YAAc,IAflBb,EAgBIc,YAAuC,IAAzBd,EAAUC,aAhB5BD,EAkBIe,SAAW,CAChCf,EAAUE,cAAgB,GAnBTF,EAiBIgB,aAAgBhB,EAAUa,YAAc,IAAO,KAEb,EACvDb,EAAUC,aAAe,EAAID,EAAUgB,aAAe,EACtDhB,EAAUE,cAAgB,IAAMF,EAAUgB,aAAe,GArBxChB,EAwBIiB,mBAAqB,GAxBzBjB,EAyBIkB,iBAA4C,IAAzBlB,EAAUC,aAzBjCD,EA0BImB,WAAanB,EAAUE,cAAgBF,EAAUiB,mBA1BrDjB,EA2BIoB,eAAiBpB,EAAUE,cAAgB,I,wWCxB/CmB,I,QAClBC,iBAAO,gB,yTAGNC,KAAKC,aAAaC,KAAKF,KAAKG,MAAMC,MAAO,EAAG,O,GAJLC,U,+GCCtBC,I,EAClBP,iBAAO,Y,EAEPA,iBAAO,kB,mWAGN,IAAMQ,EAASP,KAAKQ,SAASC,YAAYC,cACzCV,KAAKQ,SAASC,YAAYE,YAAYX,KAAKY,UAAUC,EAAIpC,EAAUG,IAAK2B,EAAOO,O,GAPjCT,U,qOCkC7BU,I,EAElBhB,iBAAO,Y,EAEPA,iBAAO,gB,EAEPA,iBAAO,U,EAEPA,iBAAO,S,EAEPA,iBAAO,U,EAEPA,iBAAO,kB,kNAXRiB,cAAgB,E,qUAaEH,EAAWC,EAAWG,EAAWC,EAAWC,GAC5D,IAAMC,EAAU,IAAIC,YACpBD,EAAQD,KAAOG,aAAWC,cAC1BH,EAAQI,SAASC,IAAIZ,EAAGC,GACxB,IAAMY,EAAO1B,KAAKC,aAAa0B,WAAWP,GAC1CM,EAAKE,YAAY,CAAET,KAAM,UACzB,IAAMU,EAAQ,IAAIC,iBAClBD,EAAME,SAASd,EAAI,EAAGC,EAAI,GAC1BQ,EAAKM,cAAcH,GAEnB7B,KAAKiC,OAAOC,KAAK,CAAErB,IAAGC,IAAGG,IAAGC,IAAGC,OAAMO,W,oCAGrC,KAAO1B,KAAKgB,cAAgB,GAC1BhB,KAAKmC,eAAenC,KAAKgB,cAAgBvC,EAAUkB,kBAAkB,GACrEK,KAAKgB,kB,gCAMP,IAFA,IAAMT,EAASP,KAAKQ,SAASC,YAAYC,cACnC0B,EAAcC,KAAKC,MAAM/B,EAAOM,EAAIpC,EAAUkB,kBAC7CK,KAAKgB,eAAiBoB,EAAc,GACzCpC,KAAKmC,eAAenC,KAAKgB,cAAgBvC,EAAUkB,kBACnDK,KAAKgB,kB,iCAIUH,EAAWC,GAA6B,IAAlByB,EAAiB,wDAClDnB,EAAU,IAAIC,YACpBD,EAAQD,KAAOG,aAAWC,cAC1BH,EAAQI,SAASC,IAAIZ,EAAGC,GACxB,IAAMY,EAAO1B,KAAKC,aAAa0B,WAAWP,GAC1CM,EAAKE,YAAY,CAAET,KAAM,SACzB,IAAMqB,EAAS,IAAIC,eACnBD,EAAOE,UAAW,EAClB,IAAMb,EAAQ,IAAIC,iBAClBD,EAAME,SAAStD,EAAUU,UAAWV,EAAUU,WAC9CqD,EAAOX,MAAQA,EACfH,EAAKM,cAAcQ,GACnB,IAAMG,EAAa,CACjB9B,IACAC,IACAY,OACAkB,QAAQ,EACRL,WAEFb,EAAKmB,WAAL,WAAgCF,EAChC3C,KAAK8C,MAAMZ,KAAKS,K,qCAgCKI,GAAiC,IAAD,EAAfC,EAAe,wDAC/CC,EAAcD,EAAQ,EAAIX,KAAKC,MAAMD,KAAKa,UAAYnC,EAAsBoC,SAASC,OAAS,IAAM,EACpGC,EAActC,EAAsBuC,aAAaL,IAAgB,GACjEM,EAAUxC,EAAsBoC,SAASF,GAHM,eAIpCM,GAJoC,IAIrD,2BAA0B,CAAC,IAAlBC,EAAiB,uBACTA,EADS,GACjB3C,EADiB,KACdC,EADc,KAExBd,KAAKyD,UACHV,EAAUtE,EAAUmB,WAAaiB,GAChCpC,EAAUiB,mBAAqBoB,GAAKrC,EAAUmB,WAC/CnB,EAAUmB,WACVnB,EAAUmB,WACVyC,KAAKC,MAAsB,EAAhBD,KAAKa,YAXiC,8BAcrD,IAdqD,EAcjDQ,GAAmB,EAd8B,eAepCL,GAfoC,IAerD,2BAA8B,CAAC,IAAtBM,EAAqB,uBACbA,EADa,GACrB9C,EADqB,KAClBC,EADkB,KAEtByB,GAAmBmB,GAA2BrB,KAAKa,UAAY,GACjEX,IAASmB,GAAmB,GAChC1D,KAAK4D,WACHb,EAAUtE,EAAUmB,WAAaiB,GAChCpC,EAAUiB,mBAAqBoB,GAAKrC,EAAUmB,WAC/C2C,IAtBiD,8BA0BrD,IAAKS,GAASX,KAAKa,SAAW,EAAG,CAC/B,IAAM/B,EAAOkB,KAAKC,MAAsB,EAAhBD,KAAKa,UAC7BlD,KAAK6D,OAAO3B,KAAK,CACfrB,EAAGpC,EAAUC,aAAeD,EAAUa,YACtCwB,EAAGd,KAAKY,UAAUE,EAAIrC,EAAUgB,aAAe,EAC/C0B,OACA2C,KAAMrF,EAAUY,oBAChB0E,KAAK,S,GA9HsC1D,U,EAgE1C8C,SAAW,CAChB,SACA,4CACA,0BACA,sCACA,mEACA,uCACA,uCACA,uDACAa,KAvGmB,SAACC,GACtB,IADgD,EAC1CC,EAAmB,GACnBjC,EAASgC,EAAEE,MAAM,KAFyB,eAG9BlC,GAH8B,IAGhD,2BAA0B,CAAC,IAAD,UACDkC,MAAM,KADL,oBACjBC,EADiB,KACbC,EADa,KAEpBC,EAAMF,EAAGD,MAAM,KAAKH,KAAI,SAAAC,GAAC,OAAIM,SAASN,MACtCO,EAAMH,EAAGF,MAAM,KAAKH,KAAI,SAAAC,GAAC,OAAIM,SAASN,MAC1C,GAAmB,IAAfK,EAAIlB,OAAc,CAEpB,IADA,IAAMqB,EAAS,GACN5D,EAAIyD,EAAI,GAAIzD,GAAKyD,EAAI,GAAIzD,IAChC4D,EAAOvC,KAAKrB,GAEdyD,EAAMG,EAER,GAAmB,IAAfD,EAAIpB,OAAc,CAEpB,IADA,IAAMsB,EAAS,GACN7D,EAAI2D,EAAI,GAAI3D,GAAK2D,EAAI,GAAI3D,IAChC6D,EAAOxC,KAAKrB,GAEd2D,EAAME,EAhBgB,qBAkBVJ,GAlBU,IAkBxB,2BAAmB,CAAC,IAAD,EAAVzD,EAAU,uBACH2D,GADG,IACjB,2BAAmB,CAAC,IAAX1D,EAAU,QACjBoD,EAAKhC,KAAK,CAACrB,EAAGC,KAFC,gCAlBK,gCAHsB,8BA2BhD,OAAOoD,K,EA8EAZ,aAAe,MACpBqB,EACA,oFACA,0DACA,8CACA,gEACA,8EACA,qDACA,sHACAX,KACA,SAAAC,GAAC,OACCA,GACAA,EACGE,MAAM,KACNH,KAAI,SAAAC,GAAC,OAAIA,EAAEE,MAAM,KAAKH,KAAI,SAAAC,GAAC,OAAIW,WAAWX,SAC1CD,KAAI,0CAAY,CAAZ,KAAiB,GAAjB,Y,qnBC3HQa,I,EAClB9E,iBAAO,Y,EAEPA,iBAAO,W,EAEPA,iBAAO,U,EAEPA,iBAAO,gB,iYAGR+E,W,IACAC,c,IACAC,W,IACAC,a,+DAEEjF,KAAK8E,MAAQI,YAAYlF,KAAKmF,IAC9BnF,KAAK+E,SAAWK,YAAmBpF,KAAKmF,IACxC,IAAMH,EAAQhF,KAAKqF,aAAaC,SAAS,kBACrCN,IACFhF,KAAKgF,MAAQA,EACbhF,KAAKiF,QAAUD,EAAMO,YAAY,W,gCAInCvF,KAAK8E,MAAMU,cAAcxF,KAAKQ,SAASC,YAAYgF,UACnDzF,KAAK8E,MAAMY,QAFG,qBAGE1F,KAAKiC,QAHP,IAGd,2BAA6B,CAAC,IAArB0D,EAAoB,QACnB9E,EAAqB8E,EAArB9E,EAAGC,EAAkB6E,EAAlB7E,EAAGG,EAAe0E,EAAf1E,EAAGC,EAAYyE,EAAZzE,EAAGC,EAASwE,EAATxE,KACpBnB,KAAKiF,QAAQ9D,GAAMyE,KAAK5F,KAAK8E,MAAOjE,EAAII,EAAI,EAAGH,EAAII,EAAI,EAAGD,EAAGC,IALjD,8BAOdlB,KAAK8E,MAAMe,U,GA9BgCxF,U,+ZCa1ByF,I,EAClB/F,iBAAO,gB,EAEPA,iBAAO,kB,EAEPA,iBAAO,gB,EAEPA,iBAAO,e,EAEPA,iBAAO,gB,kcAERgG,gB,IAyFAC,SAAU,E,EACVC,SAAW,E,EACXC,UAAW,E,EACXC,WAAa,CAAEtF,EAAG,EAAGC,EAAG,G,EACxBsF,WAAa,CAAEvF,EAAGpC,EAAUS,UAAW4B,EAAG,G,EAC1CuF,YAAc,CAAExF,EAAG,EAAGC,EAAGrC,EAAUQ,Y,6DA5FjC,IAAMmC,EAAU,IAAIC,YACpBD,EAAQD,KAAOG,aAAWgF,eAC1BlF,EAAQmF,eAAgB,EACxBnF,EAAQI,SAASC,IAAI,EAAGhD,EAAUE,cAAgB,GAClD,IAAM+C,EAAO1B,KAAKC,aAAa0B,WAAWP,GAC1CM,EAAKE,YAAY,CACfT,KAAM,SAER,IAAMU,EAAQ,IAAI2E,gBAAc/H,EAAUK,cAC1C+C,EAAMJ,IAAI,CAAEZ,GAAIpC,EAAUK,aAAe,EAAGgC,GAAIrC,EAAUM,cAAgB,GAAKN,EAAUK,cACzF4C,EAAKM,cAAcH,GAEnB,IAAM4E,EAAc,IAAI3E,iBACxB2E,EAAY1E,SAAStD,EAAUK,aAAe,EAAGL,EAAUK,aAAe,EAAG,CAC3E+B,EAAG,EACHC,EAAGrC,EAAUM,cAAgB,IAE/B,IAAMyD,EAAS,IAAIC,eACnBD,EAAOE,UAAW,EAClBF,EAAOX,MAAQ4E,EACfjE,EAAOkE,SAAW,CAAEvF,KAAM,gBAE1BO,EAAKM,cAAcQ,GAEnB,IAAMmE,EAAe,IAAI7E,iBACzB6E,EAAa5E,SAAStD,EAAUK,aAAe,EAAGL,EAAUK,aAAe,EAAG,CAC5E+B,EAAGpC,EAAUK,aAAe,EAC5BgC,EAAG,IAEL,IAAM8F,EAAU,IAAInE,eACpBmE,EAAQlE,UAAW,EACnBkE,EAAQ/E,MAAQ8E,EAChBC,EAAQF,SAAW,CAAEvF,KAAM,iBAE3BO,EAAKM,cAAc4E,GAEnB5G,KAAK+F,WAAarE,EArCN,IAuCNmF,EAvCM,oDAyCV,WAAYC,GAAuC,IAAD,8BAChD,gBAFFC,mBACkD,EAEhD,EAAKA,cAAgBD,EAF2B,EAzCxC,6DA6CME,GAA2B,IAAD,MACpCC,EAEEC,EAAOF,EAAQG,cACfC,EAAOJ,EAAQK,cAEjBH,EAAKI,YAA2C,kBAA7B,UAAAJ,EAAKK,qBAAL,eAAoBpG,MACzC8F,EAAeG,EACNA,EAAKE,YAA2C,kBAA7B,UAAAF,EAAKG,qBAAL,eAAoBpG,QAChD8F,EAAeC,GAGbD,GAA+D,WAA/C,UAAAA,EAAaO,UAAUD,qBAAvB,eAAsCpG,QACxDnB,KAAK+G,cAAcd,SAAW,EAC9BjG,KAAK+G,cAAcU,YAAYC,aAAa,UA3DtC,sCA8DMV,GAA2B,IAAD,MACpCC,EAEEC,EAAOF,EAAQG,cACfC,EAAOJ,EAAQK,cAEjBH,EAAKI,YAA2C,mBAA7B,UAAAJ,EAAKK,qBAAL,eAAoBpG,MACzC8F,EAAeG,EACNA,EAAKE,YAA2C,mBAA7B,UAAAF,EAAKG,qBAAL,eAAoBpG,QAChD8F,EAAeC,GAGbD,GAA+D,WAA/C,UAAAA,EAAaO,UAAUD,qBAAvB,eAAsCpG,QACxDnB,KAAK+G,cAAcU,YAAYE,gBAAkB,GACjD3H,KAAK+G,cAAcU,YAAYC,aAAa,WA5EtC,mCA+EGV,GACPhH,KAAK+G,cAAcb,WACvBlG,KAAK4H,gBAAgBZ,GACrBhH,KAAK6H,gBAAgBb,GACrBhH,KAAK+G,cAAce,aAAaC,KAAK,eAAgBf,QAnF7C,GAuCkBgB,qBA+C9BhI,KAAKC,aAAagI,mBAAmB,IAAIpB,EAAgB7G,S,gCASzD,GAAIA,KAAKyH,YAAYE,gBAAkB,EAChC3H,KAAKyH,YAAYS,cACpBlI,KAAKyH,YAAYS,aAAc,EAC/BlI,KAAK+F,WAAWoC,oBAAoB1G,IAAI,EAAG,GAC3CzB,KAAK+F,WAAWqC,mBAAmB,CAAEvH,GAAI,EAAIpC,EAAUS,UAAW4B,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,KAEvFd,KAAKyH,YAAYE,iBAAmB3H,KAAKG,MAAMC,MAC3CJ,KAAKyH,YAAYE,iBAAmB,IACtC3H,KAAKyH,YAAYC,aAAa,OAC9B1H,KAAKyH,YAAYS,aAAc,OAE5B,CACL,IAAMG,EAAIrI,KAAK+F,WAAWoC,oBAI1B,GAHAE,EAAE5G,IAAI,EAAG4G,EAAEvH,GACXd,KAAK+F,WAAWqC,mBAAmBpI,KAAKoG,WAAYpG,KAAKmG,YAErDnG,KAAKgG,QACFhG,KAAKsI,aAAaC,cACrBvI,KAAKgG,SAAU,QAGjB,GAAIhG,KAAKsI,aAAaC,aAAevI,KAAKiG,SAAW,EAAG,CACtDjG,KAAKiG,WACiB,IAAlBjG,KAAKiG,SACPjG,KAAKyH,YAAYC,aAAa,QAE9B1H,KAAKyH,YAAYC,aAAa,cAEhC1H,KAAKgG,SAAU,EACf,IAAMqC,EAAIrI,KAAK+F,WAAWoC,oBAC1BE,EAAE5G,IAAI4G,EAAExH,EAAG,GACXb,KAAK+F,WAAWqC,mBAAmBpI,KAAKqG,YAAarG,KAAKmG,aAIhE,IAAMqC,EAAUxI,KAAK+F,WAAW0C,cAChCzI,KAAKY,UAAU8H,IAAIF,EAAQ3H,EAAG2H,EAAQ1H,IAEjCd,KAAKkG,UAAYsC,EAAQ1H,EAA8B,IAA1BrC,EAAUE,gBAC1CqB,KAAKkG,UAAW,EAChBlG,KAAK8H,aAAaC,KAAK,iB,GAnJqB1H,U,2hBCA7BsI,I,GAClB5I,iBAAO,Y,GAEPA,iBAAO,W,GAEPA,iBAAO,kB,GAEPA,iBAAO,gB,GAEPA,iBAAO,e,0bAER+E,W,IACAC,c,IACAC,W,IACA4D,WAAkB,G,EAWlBC,uBAA8B,CAC5BC,IAAK,GACLC,KAAM,GACNC,WAAY,GACZC,KAAM,K,6DAbNjJ,KAAK8E,MAAQI,YAAYlF,KAAKmF,IAC9BnF,KAAK+E,SAAWK,YAAmBpF,KAAKmF,IAExC,IAAMH,EAAQhF,KAAKqF,aAAaC,SAAS,qBACrCN,IACFhF,KAAKgF,MAAQA,EACbhF,KAAK4I,WAAL,QAA6BM,YAAgB,IAAMlE,EAAMO,YAAY,qB,mCAS5D4D,EAAgBC,GAC3B,IAAMC,EAAQ,UAAMF,GAAN,OAAeC,GAC7B,IAAKpJ,KAAK4I,WAAWS,GAAW,CAC9B,IAAMC,EAAwBtJ,KAAK6I,uBAAuBM,IAAW,GACjEI,EAASvJ,KAAKgF,MAAMO,YAAY8D,GACrB,SAAXF,GAAgC,eAAXA,IACvBI,EAASA,EAAOC,MAAM,EAAGD,EAAOnG,OAAS,IAE3CpD,KAAK4I,WAAWS,GAAYH,YAAgBI,EAAeC,GAE7D,OAAOvJ,KAAK4I,WAAWS,K,gCAGvBrJ,KAAK8E,MAAMU,cAAcxF,KAAKQ,SAASC,YAAYgF,UACnDzF,KAAK8E,MAAMY,QAFG,MAGG1F,KAAKY,UAAdC,EAHM,EAGNA,EAAGC,EAHG,EAGHA,EACXd,KAAKyH,YAAYgC,QAAQzJ,KAAKG,MAAMC,OAEpC,IAAIsJ,EAAWC,IAASC,MACQ,SAA5B5J,KAAKyH,YAAY0B,QAAiD,eAA5BnJ,KAAKyH,YAAY0B,SACzDO,EAAWC,IAASE,QAGJ7J,KAAK8J,aAAa9J,KAAKyH,YAAY0B,OAAQnJ,KAAKyH,YAAY2B,OAE3EW,YAAY/J,KAAKyH,YAAYuC,UAAWN,GACxC9D,KACC5F,KAAK8E,MACLjE,EAAIpC,EAAUK,aAAe,EAC7BgC,EAAIrC,EAAUM,cAAgB,EAC9BN,EAAUK,aACVL,EAAUM,cACVN,EAAUK,aAAe,EACzBL,EAAUM,cACV,EACAN,EAAUO,aACVP,EAAUO,cAGVgB,KAAKyH,YAAYwC,eAAiB,IACtBjK,KAAK4I,WAAL,QAEXmB,YAAY/J,KAAKyH,YAAYuC,UAAWL,IAASC,MACjDhE,KACC5F,KAAK8E,MACLjE,EAAIpC,EAAUK,aAAe,EAC7BgC,EACArC,EAAUK,aACVL,EAAUM,cACVN,EAAUK,aAAe,EACzBL,EAAUM,cACV,EACyB,IAAzBN,EAAUO,aACe,IAAzBP,EAAUO,cAGhBgB,KAAK8E,MAAMe,U,GAvFiCxF,U,6hBCX3B6J,I,GAClBnK,iBAAO,Y,GAEPA,iBAAO,gB,GAEPA,iBAAO,U,GAEPA,iBAAO,S,gcAIN,IADA,IAAMQ,EAASP,KAAKQ,SAASC,YAAYC,cAChCyJ,EAAInK,KAAKiC,OAAOmB,OAAS,EAAG+G,GAAK,EAAGA,IAAK,CAChD,IAAMC,EAAQpK,KAAKiC,OAAOkI,GACtB5J,EAAOM,EAAIuJ,EAAMvJ,GAAK,EAAIpC,EAAUC,eACtCsB,KAAKC,aAAaoK,YAAYD,EAAM1I,MACpC1B,KAAKiC,OAAOqI,OAAOH,EAAG,IAG1B,IAAK,IAAIA,EAAInK,KAAK8C,MAAMM,OAAS,EAAG+G,GAAK,EAAGA,IAAK,CAC/C,IAAMxG,EAAO3D,KAAK8C,MAAMqH,GACpB5J,EAAOM,EAAI8C,EAAK9C,GAAK,EAAIpC,EAAUC,eACrCsB,KAAKC,aAAaoK,YAAY1G,EAAKjC,MACnC1B,KAAK8C,MAAMwH,OAAOH,EAAG,S,GAtBmB9J,U,+aCL3BkK,G,WAMnB,WAAYpF,GAA4B,yBALxCA,QAKuC,OAJvCqF,SAAgC,GAIO,KAHvCC,QAAqC,IAAIC,IAGF,KAFvCC,SAAiC,IAAID,IAEE,KADvCE,KAAO,EAEL5K,KAAKmF,GAAKA,E,uDAEF0F,GAAqB,IAAD,OACtBC,EAAUC,YAAU/K,KAAKmF,GAAI0F,EAAM,IAAIG,MAAK,SAAAhG,GAChD,EAAKyF,QAAQ/B,IAAImC,EAAM7F,GACvB,EAAK4F,UAEP5K,KAAKwK,SAAStI,KAAK4I,K,+BAEZD,GACP,OAAO7K,KAAKyK,QAAQQ,IAAIJ,K,kCAEdA,GAAqB,IAAD,OACxBC,EAAUI,YAAYlL,KAAKmF,GAAI0F,EAAM,IAAIG,MAAK,SAAAhG,GAClD,EAAK2F,SAASjC,IAAImC,EAAM7F,GACxB,EAAK4F,UAEP5K,KAAKwK,SAAStI,KAAK4I,K,iCAEVD,GACT,OAAO7K,KAAK2K,SAASM,IAAIJ,K,gKAGnBM,QAAQC,IAAIpL,KAAKwK,U,sIAGvB,OAAOxK,KAAK4K,O,iCAGZ,OAAO5K,KAAKwK,SAASpH,W,KCpCJiI,G,iDACnBlC,OAAiB,M,KACjBC,MAAgB,I,KAChBY,UAAY,E,KACZsB,OAAS,CAAC,IAAK,IAAK,IAAK,K,KACzBC,WAAa,E,KACbtB,eAAiB,E,KACjBtC,gBAAkB,E,KAClBO,aAAc,E,oEAEZ,OAAOlI,KAAKsL,OAAOE,QAAQxL,KAAKoJ,S,mCAErBD,GACPA,IAAWnJ,KAAKmJ,SACpBnJ,KAAKmJ,OAASA,EACdnJ,KAAKgK,UAAY,K,kCAEPZ,GACVpJ,KAAKiK,eAAiBxL,EAAUW,oBAChCY,KAAKoJ,MAAQA,I,kCAGb,IAAMqC,EAAQzL,KAAKuL,WAAa,EAC5BE,GAASzL,KAAKsL,OAAOlI,SAGzBpD,KAAKuL,WAAaE,EAClBzL,KAAK0L,YAAY1L,KAAKsL,OAAOG,O,8BAEvBrL,GACNJ,KAAKgK,WAAa5J,EACdJ,KAAKiK,eAAiB,IACxBjK,KAAKiK,gBAAkB7J,O,KC7BRuL,I,GAClB5L,iBAAO,W,GAEPA,iBAAO,gB,GAEPA,iBAAO,e,GAEPA,iBAAO,kB,4YAGR+E,W,IACA6F,SAA6C,IAAID,I,6DAClC,IAAD,OACZ1K,KAAK8E,MAAQI,YAAYlF,KAAKmF,IAC9B,CAAC,KAAM,UAAW,UAAW,WAAY,WAAY,WAAY,YAAYnB,KAAI,SAAAC,GAAC,OAChF,EAAK0G,SAASjC,IAAIzE,EAAG,EAAKoB,aAAauG,WAAlB,uBAA6C3H,EAA7C,e,uCAQvB,IAJA,IAAM4H,EAAK7L,KAAK2K,SAASM,IAAI,MACvBa,EAAarN,EAAUE,cACvBoN,EAAaD,EAAaD,EAAGG,OAAUH,EAAGI,MAC5C9B,EAAI,EACDA,EAAI4B,EAAYtN,EAAUC,cAC/BsB,KAAK8E,MAAMc,KAAKiG,EAAI1B,EAAI4B,EAAW,EAAGA,EAAWD,GACjD3B,M,gCAIF,IAAM+B,GAAUlM,KAAKY,UAAUC,EAC/Bb,KAAK8E,MAAMU,cAAcxF,KAAKmM,YAAY1G,UAC1CzF,KAAK8E,MAAMY,QACX1F,KAAKoM,iBACLpM,KAAKqM,WAAoB,GAATH,GAChBlM,KAAKsM,WAAoB,GAATJ,GAChBlM,KAAKuM,UAAUL,GACflM,KAAKwM,UAAmB,IAATN,GACflM,KAAK8E,MAAMe,Q,gCAEHqG,GAIR,IAHA,IAAMO,EAAOzM,KAAK2K,SAASM,IAAI,WACzBa,EAAarN,EAAUE,cAAgB,IACvCoN,EAAaD,EAAaW,EAAKT,OAAUS,EAAKR,MAC7CC,GAAU,GACfA,GAAUH,EAGZ,IADA/L,KAAK8E,MAAMc,KAAK6G,EAAMP,EAASH,EAAWtN,EAAUE,cAAgBmN,EAAYC,EAAWD,GACpFI,GAAUzN,EAAUC,cACzBsB,KAAK8E,MAAMc,KAAK6G,EAAMP,EAAQzN,EAAUE,cAAgBmN,EAAYC,EAAWD,GAC/EI,GAAUH,I,gCAGJG,GAIR,IAHA,IAAMO,EAAOzM,KAAK2K,SAASM,IAAI,WACzBa,EAAarN,EAAUE,cAAgB,IACvCoN,EAAaD,EAAaW,EAAKT,OAAUS,EAAKR,MAC7CC,GAAU,GACfA,GAAUH,EAGZ,IADA/L,KAAK8E,MAAMc,KAAK6G,EAAMP,EAASH,EAAWtN,EAAUE,cAAgBmN,EAAYC,EAAWD,GACpFI,GAAUzN,EAAUC,cACzBsB,KAAK8E,MAAMc,KAAK6G,EAAMP,EAAQzN,EAAUE,cAAgBmN,EAAYC,EAAWD,GAC/EI,GAAUH,I,iCAGHG,GAKT,IAJA,IAAMQ,EAAQ1M,KAAK2K,SAASM,IAAI,YAC1Ba,EAAarN,EAAUE,cAAgB,IACvCoN,EAAaD,EAAaY,EAAMV,OAAUU,EAAMT,MAChDU,EAAMZ,EACLG,GAAU,GACfA,GAAUH,EAAYY,EAGxB,IADA3M,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASH,EAAWtN,EAAUE,cAAgBmN,EAAYC,EAAWD,GACrFI,EAASS,GAAOlO,EAAUC,cAC/BsB,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASS,EAAKlO,EAAUE,cAAgBmN,EAAYC,EAAWD,GACtFI,GAAUH,EAAYY,I,iCAGfT,GAKT,IAJA,IAAMQ,EAAQ1M,KAAK2K,SAASM,IAAI,YAC1Ba,EAAarN,EAAUE,cAAgB,EACvCoN,EAAaD,EAAaY,EAAMV,OAAUU,EAAMT,MAChDU,EAAMZ,EACLG,GAAU,GACfA,GAAUH,EAAYY,EAGxB,IADA3M,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASH,EAAWtN,EAAUE,cAAgB,EAAGoN,EAAWD,GAC5EI,EAASS,GAAOlO,EAAUC,cAC/BsB,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASS,EAAKlO,EAAUE,cAAgB,EAAGoN,EAAWD,GAC7EI,GAAUH,EAAYY,M,GA1FwBtM,U,kbCA/BuM,I,GAClB7M,iBAAO,W,GAEPA,iBAAO,gB,GAEPA,iBAAO,e,GAEPA,iBAAO,kB,4YAGR+E,W,IACA6F,SAA6C,IAAID,I,6DAClC,IAAD,OACZ1K,KAAK8E,MAAQI,YAAYlF,KAAKmF,IAC9B,CAAC,KAAM,UAAW,UAAW,WAAY,WAAY,WAAY,YAAYnB,KAAI,SAAAC,GAAC,OAChF,EAAK0G,SAASjC,IAAIzE,EAAG,EAAKoB,aAAauG,WAAlB,uBAA6C3H,EAA7C,e,gCAIvB,IAAMiI,GAAUlM,KAAKY,UAAUC,EAC/Bb,KAAK8E,MAAMU,cAAcxF,KAAKmM,YAAY1G,UAC1CzF,KAAK8E,MAAMY,QACX1F,KAAKqM,WAAoB,GAATH,GAChBlM,KAAKsM,WAAoB,GAATJ,GAChBlM,KAAK8E,MAAMe,Q,iCAEFqG,GAKT,IAJA,IAAMQ,EAAQ1M,KAAK2K,SAASM,IAAI,YAC1Ba,EAAarN,EAAUE,cAAgB,EACvCoN,EAAaD,EAAaY,EAAMV,OAAUU,EAAMT,MAChDU,GAAOZ,EAAY,IAClBG,GAAU,GACfA,GAAUH,EAAYY,EAGxB,IADA3M,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASH,EAAWtN,EAAUE,cAAgBmN,EAAa,EAAGC,EAAWD,GACzFI,EAASS,GAAOlO,EAAUC,cAC/BsB,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASS,EAAKlO,EAAUE,cAAgBmN,EAAa,EAAGC,EAAWD,GAC1FI,GAAUH,EAAYY,I,iCAGfT,GAKT,IAJA,IAAMQ,EAAQ1M,KAAK2K,SAASM,IAAI,YAC1Ba,EAAarN,EAAUE,cAAgB,EACvCoN,EAAaD,EAAaY,EAAMV,OAAUU,EAAMT,MAChDU,GAAOZ,EAAY,IAClBG,GAAU,GACfA,GAAUH,EAAYY,EAGxB,IADA3M,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASH,EAAWtN,EAAUE,cAAgBmN,EAAa,EAAGC,EAAWD,GACzFI,EAASS,GAAOlO,EAAUC,cAC/BsB,KAAK8E,MAAMc,KAAK8G,EAAOR,EAASS,EAAKlO,EAAUE,cAAgBmN,EAAa,EAAGC,EAAWD,GAC1FI,GAAUH,EAAYY,M,GAnDmBtM,U,2bCW1BwM,I,GAClB9M,iBAAO,Y,GAEPA,iBAAO,W,GAEPA,iBAAO,S,GAEPA,iBAAO,gB,GAEPA,iBAAO,e,sbAGR+E,W,IACAC,c,IACA+H,mB,IACAC,uB,IAWAC,QAAU,E,6DARRhN,KAAK8E,MAAQI,YAAYlF,KAAKmF,IAC9BnF,KAAK+E,SAAWK,YAAmBpF,KAAKmF,IACxC,IAAMH,EAAQhF,KAAKqF,aAAaC,SAAS,kBACrCN,IACFhF,KAAK8M,cAAgB5D,YAAgB,GAAKlE,EAAMO,YAAY,SAC5DvF,KAAK+M,kBAAoB,CAAC,OAAQ,OAAQ,QAAS,QAAQ/I,KAAI,SAAAC,GAAC,OAAIiF,YAAgB,GAAKlE,EAAMO,YAAYtB,U,gCAK7GjE,KAAK8E,MAAMU,cAAcxF,KAAKQ,SAASC,YAAYgF,UACnDzF,KAAK8E,MAAMY,QACX1F,KAAKgN,SAAWhN,KAAKG,MAAMC,MAHb,qBAIGJ,KAAK8C,OAJR,IAId,2BAA6B,CAAC,IAArBa,EAAoB,QACnB9C,EAA0B8C,EAA1B9C,EAAGC,EAAuB6C,EAAvB7C,EAAG8B,EAAoBe,EAApBf,OAAQL,EAAYoB,EAAZpB,QACjBK,IACDL,EACFvC,KAAK+M,kBAAkB/M,KAAKyH,YAAYwF,wBACrClD,YAAY/J,KAAKgN,QAASrD,IAASC,MACnChE,KACC5F,KAAK8E,MACLjE,EAAIpC,EAAUU,UAAY,EAC1B2B,EAAIrC,EAAUU,UAAY,EAC1BV,EAAUU,UACVV,EAAUU,UACVV,EAAUU,UAAY,EACtBV,EAAUU,UAAY,EACtB,EACA,EACA,GAGJa,KAAK8M,cACF/C,YAAY/J,KAAKgN,QAASrD,IAASC,MACnChE,KACC5F,KAAK8E,MACLjE,EAAIpC,EAAUU,UAAY,EAC1B2B,EAAIrC,EAAUU,UAAY,EAC1BV,EAAUU,UACVV,EAAUU,aA9BJ,8BAkCda,KAAK8E,MAAMe,U,GA7D+BxF,U,yhBCVzB6M,I,GAClBnN,iBAAO,gB,GAEPA,iBAAO,S,GAEPA,iBAAO,gB,GAEPA,iBAAO,e,kZAERoN,kB,+DACe,IAAD,OACZnN,KAAKmN,aAAenN,KAAK8H,aAAasF,YAAY,gBAAgB,SAACpG,GAAwB,IAAD,MACpFC,EAAcoG,EACZnG,EAAOF,EAAQG,cACfC,EAAOJ,EAAQK,cACsB,UAAvC,UAAAH,EAAKM,UAAUD,qBAAf,eAA8BpG,OAChC8F,EAAeG,EACfiG,EAAcnG,GACkC,UAAvC,UAAAA,EAAKM,UAAUD,qBAAf,eAA8BpG,QACvC8F,EAAeC,EACfmG,EAAcjG,GAEZiG,GAAepG,GAA+D,UAA/C,UAAAA,EAAaO,UAAUD,qBAAvB,eAAsCpG,OACvE,EAAKmM,WAAWD,EAAY7F,UAAUD,cAAc5E,iB,oEAK/CA,GACJA,EAAWC,SAGZD,EAAWJ,SACbvC,KAAKyH,YAAY8F,YAEnB5K,EAAWC,QAAS,K,gCAGpB5C,KAAKmN,aAAaK,a,GAtC2BnN,U,wbCA5BoN,I,GAClB1N,iBAAO,U,GAEPA,iBAAO,kB,GAEPA,iBAAO,e,qZAIN,IAAK,IAAIoK,EAAInK,KAAK6D,OAAOT,OAAS,EAAG+G,GAAK,EAAGA,IAAK,CAChD,IAAMuD,EAAQ1N,KAAK6D,OAAOsG,GAE1B,GAAIuD,EAAM5J,KAAO,EAEf,YADA4J,EAAM5J,MAAQ9D,KAAKG,MAAMC,OAI3B,IAAKsN,EAAM3J,IAAK,CAAC,IACJ4J,EAAO3N,KAAKY,UAAfE,EACJ4M,EAAM7M,GAAKpC,EAAUG,KAAO8O,EAAM7M,EAAIpC,EAAUa,aAAeb,EAAUG,KACvE8O,EAAM5M,GAAK6M,GAAMD,EAAM5M,EAAIrC,EAAUgB,cAAgBkO,IACvD3N,KAAKyH,YAAYE,gBAAkB,GACnC3H,KAAKyH,YAAYC,aAAa,QAC9BgG,EAAM3J,KAAM,GAKlB2J,EAAM7M,GAAKpC,EAAUc,YAAcS,KAAKG,MAAMC,MAE1CsN,EAAM7M,IAAMpC,EAAUa,aACxBU,KAAK6D,OAAOyG,OAAOH,EAAG,Q,GA/BW9J,U,uUCApBuN,I,GAClB7N,iBAAO,U,GAEPA,iBAAO,e,GAEPA,iBAAO,W,GAEPA,iBAAO,gB,yYAGR+E,W,IAEA8D,WAA0B,G,EAW1BoE,QAAU,E,6DATK,IAAD,OACZhN,KAAK8E,MAAQI,YAAYlF,KAAKmF,IAE9B,IAAMH,EAAQhF,KAAKqF,aAAaC,SAAS,qBACrCN,GACF,CAAC,SAAU,SAAU,UAAU6I,SAAQ,SAAA5J,GAAC,OAAI,EAAK2E,WAAW1G,KAAKgH,YAAgB,GAAKlE,EAAMO,YAAYtB,U,gCAM1GjE,KAAK8E,MAAMU,cAAcxF,KAAKmM,YAAY1G,UAC1CzF,KAAK8E,MAAMY,QACX1F,KAAKgN,SAAWhN,KAAKG,MAAMC,MAHb,qBAIIJ,KAAK6D,QAJT,IAId,2BAA+B,CAAC,IAAvB6J,EAAsB,QAC7B1N,KAAK4I,WAAW8E,EAAMvM,MACnB4I,YAAYtL,EAAUY,oBAAsBqO,EAAM5J,KAAM6F,IAASE,QACjEjE,KAAK5F,KAAK8E,MAAO4I,EAAM7M,EAAG6M,EAAM5M,EAAGrC,EAAUa,YAAab,EAAUgB,eAP3D,8BASdO,KAAK8E,MAAMe,U,GAjCgCxF,U,gbC2BrC,uCAAG,oDAAAyN,EAAA,6DACLhG,EAAe,IAAIiG,gBACnBC,EAAQC,cACRC,EAASF,EAAMG,YACfC,EAAOJ,EAAMK,UAEb7N,EAAW8N,YAAeJ,EAAQzP,EAAUC,aAAcD,EAAUE,cAAe,CACvF4P,WAAY,IAERpJ,EAAK3E,EAASgO,aACdlG,EAAemG,YAAgCP,EAAQ1N,GAEvD2L,EAAcuC,YAAkBjQ,EAAUC,aAAcD,EAAUE,cAAeuP,EAAOjC,MAAOiC,EAAOlC,QAC5GxL,EAASmO,UAAUxC,GACnB3L,EAASoO,UAEHvJ,EAAe,IAAIkF,GAAapF,IACzB4F,UAAU,qBACvB1F,EAAa0F,UAAU,kBACvB1F,EAAa0F,UAAU,kBACvB,CAAC,KAAM,UAAW,UAAW,WAAY,WAAY,WAAY,YAAY/G,KAAI,SAAAC,GAAC,OAChFoB,EAAa6F,YAAb,uBAAyCjH,EAAzC,YAEFmK,EAAKS,UAAL,aAvBW,UAwBLxJ,EAAayJ,gBAxBR,QA0BLC,EAAiB,WACrB,IAGM9O,EAAe,IAAI+O,UAAQ,CAAEnO,EAAG,EAAGC,EAAGrC,EAAUI,UAChDoQ,EAAY,IAAIC,QAChBzH,EAAc,IAAI4D,GAClB8D,EAAiB,IAAIC,IAAQ,EAAG,GA8BtC,OA7BA5O,EAASC,YAAYE,YAAY,EAAG,GAEpCsO,EAAUI,SAAS,UAAWlK,GAC9B8J,EAAUI,SAAS,eAAgBpP,GACnCgP,EAAUI,SAAS,WAAY7O,GAC/ByO,EAAUI,SAAS,SAZU,IAa7BJ,EAAUI,SAAS,QAZQ,IAa3BJ,EAAUI,SAAS,SAZU,IAa7BJ,EAAUI,SAAS,iBAAkBF,GACrCF,EAAUI,SAAS,eAAgB/G,GACnC2G,EAAUI,SAAS,eAAgBhK,GACnC4J,EAAUI,SAAS,cAAe5H,GAClCwH,EAAUI,SAAS,cAAelD,GAClC8C,EAAUI,SAAS,eAAgBvH,GAEnCmH,EAAUK,UAAU,IAAIvO,IACxBkO,EAAUK,UAAU,IAAIxJ,IACxBmJ,EAAUK,UAAU,IAAIpF,IACxB+E,EAAUK,UAAU,IAAIpC,IACxB+B,EAAUK,UAAU,IAAI7B,IACxBwB,EAAUK,UAAU,IAAIxP,IAExBmP,EAAUK,UAAU,IAAIhP,IAAwB,GAChD2O,EAAUK,UAAU,IAAI3D,IAA0B,GAClDsD,EAAUK,UAAU,IAAIzK,IAAqB,GAC7CoK,EAAUK,UAAU,IAAIzC,IAAoB,GAC5CoC,EAAUK,UAAU,IAAI1B,IAAqB,GAC7CqB,EAAUK,UAAU,IAAI3G,IAAsB,GAC9CsG,EAAUK,UAAU,IAAI1C,IAAqB,GACtCqC,GAGLA,EAAYF,IACZ7I,GAAW,EAEf4B,EAAasF,YAAY,YAAY,WACnClH,GAAW,EACX+I,EAAUM,UACVC,YAAW,WACTP,EAAYF,IACZ7I,GAAW,IACV,QAGLf,EAAGsK,WAAW,EAAG,EAAG,EAAG,GACjBC,EAAOC,aAAe,SAAAvP,GAC1B+E,EAAGyK,MAAMzK,EAAG0K,kBACZZ,EAAUa,SAAS1P,IAClB8F,GAAY+I,EAAUc,sBACvBd,EAAUe,0BAGZC,aAAY,kBAAO7B,EAAKS,UAAL,eAAyBa,EAAKQ,YAAa,KAtFnD,4CAAH,qDAyFVC,K","file":"static/js/main.32f4a325.chunk.js","sourcesContent":["export default class Constants {\n  public static readonly CAMERA_WIDTH = 4;\n  public static readonly CAMERA_HEIGHT = 8;\n  public static readonly GAP = 1;\n  public static readonly GRAVITY = 20;\n  public static readonly PLAYER_WIDTH = 0.2;\n  public static readonly PLAYER_HEIGHT = 0.2;\n  public static readonly PLAYER_SCALE = 5;\n  public static readonly JUMP_FORCE = -10;\n  public static readonly RUN_FORCE = 2;\n  public static readonly STAR_SIZE = 0.2;\n\n  public static readonly TRANSITION_DURATION = 1.5;\n\n  public static readonly ALIEN_SPAWNING_TIME = 0.5;\n  public static readonly ALIEN_WIDTH = 1.3;\n  public static readonly ALIEN_SPEED = Constants.CAMERA_WIDTH * 1.5;\n  public static readonly ALIEN_HEIGHT = (Constants.ALIEN_WIDTH / 160) * 113;\n  public static readonly ALIEN_YS = [\n    Constants.CAMERA_HEIGHT / 2 - Constants.ALIEN_HEIGHT / 2,\n    Constants.CAMERA_WIDTH / 3 - Constants.ALIEN_HEIGHT / 2,\n    Constants.CAMERA_HEIGHT / 1.5 - Constants.ALIEN_HEIGHT / 2\n  ];\n\n  public static readonly TOTAL_BLOCK_HEIGHT = 15;\n  public static readonly BLOCK_BLOCK_SIZE = Constants.CAMERA_WIDTH * 2.1;\n  public static readonly BLOCK_SIZE = Constants.CAMERA_HEIGHT / Constants.TOTAL_BLOCK_HEIGHT;\n  public static readonly BLOCK_OFFSET_Y = Constants.CAMERA_HEIGHT / 1.7;\n}\n","import { b2World } from 'box2d.ts';\nimport { Inject, System } from 'flat-ecs';\n\nexport default class PhysicsSystem extends System {\n  @Inject('physicsWorld')\n  physicsWorld: b2World;\n  process(): void {\n    this.physicsWorld.Step(this.world.delta, 8, 3);\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport { Vector2, Viewport } from 'gdxjs';\nimport Constants from '../Constants';\n\nexport default class CameraMovementSystem extends System {\n  @Inject('viewport')\n  viewport: Viewport;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n  process(): void {\n    const camPos = this.viewport.getCamera().getPosition();\n    this.viewport.getCamera().setPosition(this.playerPos.x - Constants.GAP, camPos.y);\n  }\n}\n","import { b2BodyDef, b2BodyType, b2FixtureDef, b2PolygonShape, b2World } from 'box2d.ts';\nimport { Inject, System } from 'flat-ecs';\nimport { Vector2, Viewport } from 'gdxjs';\nimport Alien from '../Alien';\nimport Block from '../Block';\nimport Constants from '../Constants';\nimport Star from '../Star';\n\nconst processPattern = (s: string): number[][] => {\n  const grid: number[][] = [];\n  const blocks = s.split(';');\n  for (let block of blocks) {\n    const [xs, ys] = block.split(',');\n    let xss = xs.split('-').map(s => parseInt(s));\n    let yss = ys.split('-').map(s => parseInt(s));\n    if (xss.length === 2) {\n      const newXss = [];\n      for (let x = xss[0]; x <= xss[1]; x++) {\n        newXss.push(x);\n      }\n      xss = newXss;\n    }\n    if (yss.length === 2) {\n      const newYss = [];\n      for (let x = yss[0]; x <= yss[1]; x++) {\n        newYss.push(x);\n      }\n      yss = newYss;\n    }\n    for (let x of xss) {\n      for (let y of yss) {\n        grid.push([x, y]);\n      }\n    }\n  }\n  return grid;\n};\n\nexport default class BlockGenerationSystem extends System {\n  generatedStep = 0;\n  @Inject('viewport')\n  viewport: Viewport;\n  @Inject('physicsWorld')\n  physicsWorld: b2World;\n  @Inject('blocks')\n  blocks: Array<Block>;\n  @Inject('stars')\n  stars: Array<Star>;\n  @Inject('aliens')\n  aliens: Array<Alien>;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n  private createBox(x: number, y: number, w: number, h: number, type: number) {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x, y);\n    const body = this.physicsWorld.CreateBody(bodyDef);\n    body.SetUserData({ type: 'block' });\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(w / 2, h / 2);\n    body.CreateFixture(shape);\n\n    this.blocks.push({ x, y, w, h, type, body });\n  }\n  initialized() {\n    while (this.generatedStep < 2) {\n      this.generateBlocks(this.generatedStep * Constants.BLOCK_BLOCK_SIZE, true);\n      this.generatedStep++;\n    }\n  }\n  process(): void {\n    const camPos = this.viewport.getCamera().getPosition();\n    const currentStep = Math.floor(camPos.x / Constants.BLOCK_BLOCK_SIZE);\n    while (this.generatedStep <= currentStep + 1) {\n      this.generateBlocks(this.generatedStep * Constants.BLOCK_BLOCK_SIZE);\n      this.generatedStep++;\n    }\n  }\n\n  private createStar(x: number, y: number, special = false) {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x, y);\n    const body = this.physicsWorld.CreateBody(bodyDef);\n    body.SetUserData({ type: 'star' });\n    const fixDef = new b2FixtureDef();\n    fixDef.isSensor = true;\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(Constants.STAR_SIZE, Constants.STAR_SIZE);\n    fixDef.shape = shape;\n    body.CreateFixture(fixDef);\n    const starObject = {\n      x,\n      y,\n      body,\n      active: true,\n      special\n    };\n    body.m_userData['starObject'] = starObject;\n    this.stars.push(starObject);\n  }\n\n  static patterns = [\n    '1-10,2',\n    '1-4,2;6-9,2;4,3-5;5,4;5,8-10;6,7-10;7,7-8',\n    '1-9,2;3,3-5;6-8,3;6-7,4',\n    '1-9,2;4,5-8;2,11;6,11;2-6,12;2-6,13',\n    '1-5,2;8-12,2;3-5,3;8-10,3;4-5,4;8-9,4;5-8,5;2-8,11;3-7,12;4-6,13',\n    '1-5,2;8-12,2;4-5,3;8-9,3;4-5,4;8-9,4',\n    '1-14,2;4-10,5;4-10,6;4,7;10,7;7,9-12',\n    '1-14,2;4-5,3;9-11,3;4,4;10,4;5-6,10;4-11,11;4-11,12'\n  ].map(processPattern);\n\n  static starPatterns = [\n    undefined,\n    '2.5,6.5;3,7.2;3.5,7.9;3.8,9.2;3.9,10.2;4,11.2;4.2,12.2;5.2,12.6;6.1,12.2;6.2,11.3',\n    '2.2,6.8;2.8,7.5;3.2,8.1;5.5,6.8;5.9,7.5;6.3,8.3;6.7,9.1',\n    '2.5,7.8;2.9,8.5;3.2,9.2;4,9.6;4.8,9.6;5.5,9',\n    '2.9,6.5;3.2,7.2;4,7.9;4.8,7.4;5.2,6.5;6.2,6.5;7.2,6.5;8.2,6.5',\n    '3.2,6.5;3.5,7;4,7.5;4.8,7.3;5.3,6.5;6.5,8;7,9;8,9;8.5,8;8.8,7.5;9,6.5;9.1,6',\n    '4.5,9;5.5,7.5;6.5,7.5;7.5,7.5;8.5,7.5;9.5,8;10.5,9',\n    '4.5,5.5;5.5,5.5;5.5,4.5;6.5,4.5;6.5,3.5;8.5,7.5;9,8.5;10,8.5;10.3,7.5;10.5,5.5;11.5,5.5;11.5,4.5;12.5,4.5;12.5,3.5'\n  ].map(\n    s =>\n      s &&\n      s\n        .split(';')\n        .map(s => s.split(',').map(s => parseFloat(s)))\n        .map(([x, y]) => [x - 0.5, y])\n  );\n\n  private generateBlocks(offsetX: number, first = false) {\n    const patternType = first ? 0 : Math.floor(Math.random() * (BlockGenerationSystem.patterns.length - 1)) + 1;\n    const starPattern = BlockGenerationSystem.starPatterns[patternType] || [];\n    const pattern = BlockGenerationSystem.patterns[patternType];\n    for (let cell of pattern) {\n      const [x, y] = cell;\n      this.createBox(\n        offsetX + Constants.BLOCK_SIZE * x,\n        (Constants.TOTAL_BLOCK_HEIGHT - y) * Constants.BLOCK_SIZE,\n        Constants.BLOCK_SIZE,\n        Constants.BLOCK_SIZE,\n        Math.floor(Math.random() * 3)\n      );\n    }\n    let specialGenerated = false;\n    for (let star of starPattern) {\n      const [x, y] = star;\n      const special: boolean = specialGenerated ? false : Math.random() <= 0.1;\n      if (special) specialGenerated = true;\n      this.createStar(\n        offsetX + Constants.BLOCK_SIZE * x,\n        (Constants.TOTAL_BLOCK_HEIGHT - y) * Constants.BLOCK_SIZE,\n        special\n      );\n    }\n\n    if (!first && Math.random() < 1) {\n      const type = Math.floor(Math.random() * 3);\n      this.aliens.push({\n        x: Constants.CAMERA_WIDTH - Constants.ALIEN_WIDTH,\n        y: this.playerPos.y - Constants.ALIEN_HEIGHT / 2,\n        type,\n        time: Constants.ALIEN_SPAWNING_TIME,\n        hit: false\n      });\n    }\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport { createBatch, createWhiteTexture, SpriteBatch, Texture, TextureAtlas, TextureRegion, Viewport } from 'gdxjs';\nimport AssetManager from '../AssetManager';\nimport Block from '../Block';\n\nexport default class BlockRenderSystem extends System {\n  @Inject('viewport')\n  viewport: Viewport;\n  @Inject('context')\n  gl: WebGLRenderingContext;\n  @Inject('blocks')\n  blocks: Array<Block>;\n  @Inject('assetManager')\n  assetManager: AssetManager;\n\n  batch: SpriteBatch;\n  whiteTex: Texture;\n  atlas: TextureAtlas;\n  regions: TextureRegion[];\n  initialized() {\n    this.batch = createBatch(this.gl);\n    this.whiteTex = createWhiteTexture(this.gl);\n    const atlas = this.assetManager.getAtlas('./ground.atlas');\n    if (atlas) {\n      this.atlas = atlas;\n      this.regions = atlas.findRegions('tile');\n    }\n  }\n  process(): void {\n    this.batch.setProjection(this.viewport.getCamera().combined);\n    this.batch.begin();\n    for (let box of this.blocks) {\n      const { x, y, w, h, type } = box;\n      this.regions[type].draw(this.batch, x - w / 2, y - h / 2, w, h);\n    }\n    this.batch.end();\n  }\n}\n","import {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Contact,\n  b2ContactListener,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2World\n} from 'box2d.ts';\nimport { EventEmitter } from 'fbemitter';\nimport { Inject, System } from 'flat-ecs';\nimport { Vector2 } from 'gdxjs';\nimport { ViewportAwareInputHandler } from 'gdxjs/lib/createViewportAwareInputHandler';\nimport Constants from '../Constants';\nimport PlayerState from '../PlayerState';\n\nexport default class PlayerMovementSystem extends System {\n  @Inject('physicsWorld')\n  physicsWorld: b2World;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n  @Inject('inputHandler')\n  inputHandler: ViewportAwareInputHandler;\n  @Inject('playerState')\n  playerState: PlayerState;\n  @Inject('eventEmitter')\n  eventEmitter: EventEmitter;\n  playerBody: b2Body;\n  initialized() {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.fixedRotation = true;\n    bodyDef.position.Set(2, Constants.CAMERA_HEIGHT / 2);\n    const body = this.physicsWorld.CreateBody(bodyDef);\n    body.SetUserData({\n      type: 'user'\n    });\n    const shape = new b2CircleShape(Constants.PLAYER_WIDTH);\n    shape.Set({ x: -Constants.PLAYER_WIDTH / 2, y: -Constants.PLAYER_HEIGHT / 2 }, Constants.PLAYER_WIDTH);\n    body.CreateFixture(shape);\n\n    const sensorShape = new b2PolygonShape();\n    sensorShape.SetAsBox(Constants.PLAYER_WIDTH / 8, Constants.PLAYER_WIDTH / 8, {\n      x: 0,\n      y: Constants.PLAYER_HEIGHT / 2\n    });\n    const fixDef = new b2FixtureDef();\n    fixDef.isSensor = true;\n    fixDef.shape = sensorShape;\n    fixDef.userData = { type: 'playerSensor' };\n\n    body.CreateFixture(fixDef);\n\n    const sensorShape2 = new b2PolygonShape();\n    sensorShape2.SetAsBox(Constants.PLAYER_WIDTH / 8, Constants.PLAYER_WIDTH / 8, {\n      x: Constants.PLAYER_WIDTH / 2,\n      y: 0\n    });\n    const fixDef2 = new b2FixtureDef();\n    fixDef2.isSensor = true;\n    fixDef2.shape = sensorShape2;\n    fixDef2.userData = { type: 'playerSensor2' };\n\n    body.CreateFixture(fixDef2);\n\n    this.playerBody = body;\n\n    class ContactListener extends b2ContactListener {\n      movementSytem: PlayerMovementSystem;\n      constructor(movementSystem: PlayerMovementSystem) {\n        super();\n        this.movementSytem = movementSystem;\n      }\n      processJumpable(contact: b2Contact): void {\n        let otherFixture;\n\n        const fixA = contact.GetFixtureA();\n        const fixB = contact.GetFixtureB();\n\n        if (fixA.IsSensor() && fixA.GetUserData()?.type === 'playerSensor') {\n          otherFixture = fixB;\n        } else if (fixB.IsSensor() && fixB.GetUserData()?.type === 'playerSensor') {\n          otherFixture = fixA;\n        }\n\n        if (otherFixture && otherFixture.GetBody().GetUserData()?.type === 'block') {\n          this.movementSytem.jumpLeft = 2;\n          this.movementSytem.playerState.changeAction('run');\n        }\n      }\n      processObstacle(contact: b2Contact): void {\n        let otherFixture;\n\n        const fixA = contact.GetFixtureA();\n        const fixB = contact.GetFixtureB();\n\n        if (fixA.IsSensor() && fixA.GetUserData()?.type === 'playerSensor2') {\n          otherFixture = fixB;\n        } else if (fixB.IsSensor() && fixB.GetUserData()?.type === 'playerSensor2') {\n          otherFixture = fixA;\n        }\n\n        if (otherFixture && otherFixture.GetBody().GetUserData()?.type === 'block') {\n          this.movementSytem.playerState.stunnedDuration = 0.2;\n          this.movementSytem.playerState.changeAction('hurt');\n        }\n      }\n      BeginContact(contact: b2Contact): void {\n        if (this.movementSytem.gameOver) return;\n        this.processJumpable(contact);\n        this.processObstacle(contact);\n        this.movementSytem.eventEmitter.emit('beginContact', contact);\n      }\n    }\n    this.physicsWorld.SetContactListener(new ContactListener(this));\n  }\n  pressed = false;\n  jumpLeft = 0;\n  gameOver = false;\n  zeroCenter = { x: 0, y: 0 };\n  runImpulse = { x: Constants.RUN_FORCE, y: 0 };\n  jumpImpulse = { x: 0, y: Constants.JUMP_FORCE };\n  process(): void {\n    if (this.playerState.stunnedDuration > 0) {\n      if (!this.playerState.appliedStun) {\n        this.playerState.appliedStun = true;\n        this.playerBody.GetLinearVelocity().Set(0, 0);\n        this.playerBody.ApplyLinearImpulse({ x: -2 * Constants.RUN_FORCE, y: 0 }, { x: 0, y: 0 });\n      }\n      this.playerState.stunnedDuration -= this.world.delta;\n      if (this.playerState.stunnedDuration <= 0) {\n        this.playerState.changeAction('run');\n        this.playerState.appliedStun = false;\n      }\n    } else {\n      const v = this.playerBody.GetLinearVelocity();\n      v.Set(0, v.y);\n      this.playerBody.ApplyLinearImpulse(this.runImpulse, this.zeroCenter);\n\n      if (this.pressed) {\n        if (!this.inputHandler.isTouched()) {\n          this.pressed = false;\n        }\n      } else {\n        if (this.inputHandler.isTouched() && this.jumpLeft > 0) {\n          this.jumpLeft--;\n          if (this.jumpLeft === 1) {\n            this.playerState.changeAction('jump');\n          } else {\n            this.playerState.changeAction('doubleJump');\n          }\n          this.pressed = true;\n          const v = this.playerBody.GetLinearVelocity();\n          v.Set(v.x, 0);\n          this.playerBody.ApplyLinearImpulse(this.jumpImpulse, this.zeroCenter);\n        }\n      }\n    }\n    const bodyPos = this.playerBody.GetPosition();\n    this.playerPos.set(bodyPos.x, bodyPos.y);\n\n    if (!this.gameOver && bodyPos.y > Constants.CAMERA_HEIGHT * 1.2) {\n      this.gameOver = true;\n      this.eventEmitter.emit('gameOver');\n    }\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport {\n  createAnimation,\n  createBatch,\n  createWhiteTexture,\n  SpriteBatch,\n  Texture,\n  TextureAtlas,\n  Vector2,\n  Viewport,\n  Animation,\n  PlayMode,\n  TextureRegion\n} from 'gdxjs';\nimport AssetManager from '../AssetManager';\nimport Constants from '../Constants';\nimport PlayerState from '../PlayerState';\n\nexport default class PlayerRenderSystem extends System {\n  @Inject('viewport')\n  viewport: Viewport;\n  @Inject('context')\n  gl: WebGLRenderingContext;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n  @Inject('assetManager')\n  assetManager: AssetManager;\n  @Inject('playerState')\n  playerState: PlayerState;\n  batch: SpriteBatch;\n  whiteTex: Texture;\n  atlas: TextureAtlas;\n  animations: any = {};\n  initialized() {\n    this.batch = createBatch(this.gl);\n    this.whiteTex = createWhiteTexture(this.gl);\n\n    const atlas = this.assetManager.getAtlas('./main-char.atlas');\n    if (atlas) {\n      this.atlas = atlas;\n      this.animations['upgrade'] = createAnimation(0.08, atlas.findRegions('upgrade_blast'));\n    }\n  }\n  animationFrameDuration: any = {\n    run: 0.1,\n    jump: 0.1,\n    doubleJump: 0.1,\n    hurt: 0.05\n  };\n  getAnimation(action: string, state: string): Animation {\n    const animName = `${action}${state}`;\n    if (!this.animations[animName]) {\n      const frameDuration: number = this.animationFrameDuration[action] || 0.1;\n      let frames = this.atlas.findRegions(animName);\n      if (action === 'jump' || action === 'doubleJump') {\n        frames = frames.slice(0, frames.length - 2) as [TextureRegion];\n      }\n      this.animations[animName] = createAnimation(frameDuration, frames);\n    }\n    return this.animations[animName];\n  }\n  process(): void {\n    this.batch.setProjection(this.viewport.getCamera().combined);\n    this.batch.begin();\n    const { x, y } = this.playerPos;\n    this.playerState.process(this.world.delta);\n\n    let playMode = PlayMode.LOOP;\n    if (this.playerState.action === 'jump' || this.playerState.action === 'doubleJump') {\n      playMode = PlayMode.NORMAL;\n    }\n\n    const animation = this.getAnimation(this.playerState.action, this.playerState.state);\n    animation\n      .getKeyFrame(this.playerState.stateTime, playMode)\n      .draw(\n        this.batch,\n        x - Constants.PLAYER_WIDTH / 2,\n        y - Constants.PLAYER_HEIGHT / 2,\n        Constants.PLAYER_WIDTH,\n        Constants.PLAYER_HEIGHT,\n        Constants.PLAYER_WIDTH / 2,\n        Constants.PLAYER_HEIGHT,\n        0,\n        Constants.PLAYER_SCALE,\n        Constants.PLAYER_SCALE\n      );\n\n    if (this.playerState.transitionTime > 0) {\n      const blast = this.animations['upgrade'] as Animation;\n      blast\n        .getKeyFrame(this.playerState.stateTime, PlayMode.LOOP)\n        .draw(\n          this.batch,\n          x - Constants.PLAYER_WIDTH / 2,\n          y,\n          Constants.PLAYER_WIDTH,\n          Constants.PLAYER_HEIGHT,\n          Constants.PLAYER_WIDTH / 2,\n          Constants.PLAYER_HEIGHT,\n          0,\n          Constants.PLAYER_SCALE * 1.2,\n          Constants.PLAYER_SCALE * 1.2\n        );\n    }\n    this.batch.end();\n  }\n}\n","import { b2World } from 'box2d.ts';\nimport { Inject, System } from 'flat-ecs';\nimport { Viewport } from 'gdxjs';\nimport Block from '../Block';\nimport Constants from '../Constants';\nimport Star from '../Star';\n\nexport default class BlockRemovalSystem extends System {\n  @Inject('viewport')\n  viewport: Viewport;\n  @Inject('physicsWorld')\n  physicsWorld: b2World;\n  @Inject('blocks')\n  blocks: Array<Block>;\n  @Inject('stars')\n  stars: Array<Star>;\n  process(): void {\n    const camPos = this.viewport.getCamera().getPosition();\n    for (let i = this.blocks.length - 1; i >= 0; i--) {\n      const block = this.blocks[i];\n      if (camPos.x - block.x >= 3 * Constants.CAMERA_WIDTH) {\n        this.physicsWorld.DestroyBody(block.body);\n        this.blocks.splice(i, 1);\n      }\n    }\n    for (let i = this.stars.length - 1; i >= 0; i--) {\n      const star = this.stars[i];\n      if (camPos.x - star.x >= 3 * Constants.CAMERA_WIDTH) {\n        this.physicsWorld.DestroyBody(star.body);\n        this.stars.splice(i, 1);\n      }\n    }\n  }\n}\n","import { loadAtlas, loadTexture, Texture, TextureAtlas } from 'gdxjs';\n\nexport default class AssetManager {\n  gl: WebGLRenderingContext;\n  promises: Array<Promise<any>> = [];\n  atlases: Map<string, TextureAtlas> = new Map();\n  textures: Map<string, Texture> = new Map();\n  done = 0;\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n  }\n  loadAtlas(path: string): void {\n    const promise = loadAtlas(this.gl, path, {}).then(atlas => {\n      this.atlases.set(path, atlas);\n      this.done++;\n    });\n    this.promises.push(promise);\n  }\n  getAtlas(path: string): TextureAtlas | undefined {\n    return this.atlases.get(path);\n  }\n  loadTexture(path: string): void {\n    const promise = loadTexture(this.gl, path, {}).then(atlas => {\n      this.textures.set(path, atlas);\n      this.done++;\n    });\n    this.promises.push(promise);\n  }\n  getTexture(path: string): Texture | undefined {\n    return this.textures.get(path);\n  }\n  async finishLoading() {\n    await Promise.all(this.promises);\n  }\n  getDone(): number {\n    return this.done;\n  }\n  getTotal(): number {\n    return this.promises.length;\n  }\n}\n","import Constants from './Constants';\n\nexport default class PlayerState {\n  action: string = 'run';\n  state: string = 'A';\n  stateTime = 0;\n  states = ['A', 'B', 'C', 'D'];\n  stateIndex = 0;\n  transitionTime = 0;\n  stunnedDuration = 0;\n  appliedStun = false;\n  getCurrentStateIndex(): number {\n    return this.states.indexOf(this.state);\n  }\n  changeAction(action: string) {\n    if (action === this.action) return;\n    this.action = action;\n    this.stateTime = 0;\n  }\n  changeState(state: string) {\n    this.transitionTime = Constants.TRANSITION_DURATION;\n    this.state = state;\n  }\n  nextState() {\n    const index = this.stateIndex + 1;\n    if (index >= this.states.length) {\n      return;\n    }\n    this.stateIndex = index;\n    this.changeState(this.states[index]);\n  }\n  process(delta: number) {\n    this.stateTime += delta;\n    if (this.transitionTime > 0) {\n      this.transitionTime -= delta;\n    }\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport { createBatch, OrthographicCamera, SpriteBatch, Texture, Vector2 } from 'gdxjs';\nimport AssetManager from '../AssetManager';\nimport Constants from '../Constants';\n\nexport default class BackgroundRenderSystem extends System {\n  @Inject('context')\n  gl: WebGLRenderingContext;\n  @Inject('assetManager')\n  assetManager: AssetManager;\n  @Inject('fixedCamera')\n  fixedCamera: OrthographicCamera;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n\n  batch: SpriteBatch;\n  textures: Map<string, Texture | undefined> = new Map();\n  initialized() {\n    this.batch = createBatch(this.gl);\n    ['bg', 'city_01', 'city_02', 'cloud_01', 'cloud_02', 'smoke_01', 'smoke_02'].map(s =>\n      this.textures.set(s, this.assetManager.getTexture(`./background/${s}.png`))\n    );\n  }\n  drawBackground() {\n    const bg = this.textures.get('bg') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT;\n    const drawWidth = (drawHeight / bg.height) * bg.width;\n    let i = 0;\n    while (i * drawWidth < Constants.CAMERA_WIDTH) {\n      this.batch.draw(bg, i * drawWidth, 0, drawWidth, drawHeight);\n      i++;\n    }\n  }\n  process(): void {\n    const offset = -this.playerPos.x;\n    this.batch.setProjection(this.fixedCamera.combined);\n    this.batch.begin();\n    this.drawBackground();\n    this.drawCloud1(offset * 0.5);\n    this.drawCloud2(offset * 0.8);\n    this.drawCity1(offset);\n    this.drawCity2(offset * 1.1);\n    this.batch.end();\n  }\n  drawCity1(offset: number) {\n    const city = this.textures.get('city_01') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT / 1.5;\n    const drawWidth = (drawHeight / city.height) * city.width;\n    while (offset <= 0) {\n      offset += drawWidth;\n    }\n    this.batch.draw(city, offset - drawWidth, Constants.CAMERA_HEIGHT - drawHeight, drawWidth, drawHeight);\n    while (offset <= Constants.CAMERA_WIDTH) {\n      this.batch.draw(city, offset, Constants.CAMERA_HEIGHT - drawHeight, drawWidth, drawHeight);\n      offset += drawWidth;\n    }\n  }\n  drawCity2(offset: number) {\n    const city = this.textures.get('city_02') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT / 1.5;\n    const drawWidth = (drawHeight / city.height) * city.width;\n    while (offset <= 0) {\n      offset += drawWidth;\n    }\n    this.batch.draw(city, offset - drawWidth, Constants.CAMERA_HEIGHT - drawHeight, drawWidth, drawHeight);\n    while (offset <= Constants.CAMERA_WIDTH) {\n      this.batch.draw(city, offset, Constants.CAMERA_HEIGHT - drawHeight, drawWidth, drawHeight);\n      offset += drawWidth;\n    }\n  }\n  drawCloud1(offset: number) {\n    const cloud = this.textures.get('cloud_01') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT / 1.2;\n    const drawWidth = (drawHeight / cloud.height) * cloud.width;\n    const gap = drawWidth;\n    while (offset <= 0) {\n      offset += drawWidth + gap;\n    }\n    this.batch.draw(cloud, offset - drawWidth, Constants.CAMERA_HEIGHT - drawHeight, drawWidth, drawHeight);\n    while (offset + gap <= Constants.CAMERA_WIDTH) {\n      this.batch.draw(cloud, offset + gap, Constants.CAMERA_HEIGHT - drawHeight, drawWidth, drawHeight);\n      offset += drawWidth + gap;\n    }\n  }\n  drawCloud2(offset: number) {\n    const cloud = this.textures.get('cloud_02') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT / 6;\n    const drawWidth = (drawHeight / cloud.height) * cloud.width;\n    const gap = drawWidth;\n    while (offset <= 0) {\n      offset += drawWidth + gap;\n    }\n    this.batch.draw(cloud, offset - drawWidth, Constants.CAMERA_HEIGHT / 4, drawWidth, drawHeight);\n    while (offset + gap <= Constants.CAMERA_WIDTH) {\n      this.batch.draw(cloud, offset + gap, Constants.CAMERA_HEIGHT / 4, drawWidth, drawHeight);\n      offset += drawWidth + gap;\n    }\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport { createBatch, OrthographicCamera, SpriteBatch, Texture, Vector2 } from 'gdxjs';\nimport AssetManager from '../AssetManager';\nimport Constants from '../Constants';\n\nexport default class SmokeRenderSystem extends System {\n  @Inject('context')\n  gl: WebGLRenderingContext;\n  @Inject('assetManager')\n  assetManager: AssetManager;\n  @Inject('fixedCamera')\n  fixedCamera: OrthographicCamera;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n\n  batch: SpriteBatch;\n  textures: Map<string, Texture | undefined> = new Map();\n  initialized() {\n    this.batch = createBatch(this.gl);\n    ['bg', 'city_01', 'city_02', 'cloud_01', 'cloud_02', 'smoke_01', 'smoke_02'].map(s =>\n      this.textures.set(s, this.assetManager.getTexture(`./background/${s}.png`))\n    );\n  }\n  process(): void {\n    const offset = -this.playerPos.x;\n    this.batch.setProjection(this.fixedCamera.combined);\n    this.batch.begin();\n    this.drawCloud1(offset * 0.6);\n    this.drawCloud2(offset * 0.1);\n    this.batch.end();\n  }\n  drawCloud1(offset: number) {\n    const cloud = this.textures.get('smoke_01') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT / 5;\n    const drawWidth = (drawHeight / cloud.height) * cloud.width;\n    const gap = -drawWidth / 1.5;\n    while (offset <= 0) {\n      offset += drawWidth + gap;\n    }\n    this.batch.draw(cloud, offset - drawWidth, Constants.CAMERA_HEIGHT - drawHeight / 2, drawWidth, drawHeight);\n    while (offset + gap <= Constants.CAMERA_WIDTH) {\n      this.batch.draw(cloud, offset + gap, Constants.CAMERA_HEIGHT - drawHeight / 2, drawWidth, drawHeight);\n      offset += drawWidth + gap;\n    }\n  }\n  drawCloud2(offset: number) {\n    const cloud = this.textures.get('smoke_02') as Texture;\n    const drawHeight = Constants.CAMERA_HEIGHT / 5;\n    const drawWidth = (drawHeight / cloud.height) * cloud.width;\n    const gap = -drawWidth / 1.5;\n    while (offset <= 0) {\n      offset += drawWidth + gap;\n    }\n    this.batch.draw(cloud, offset - drawWidth, Constants.CAMERA_HEIGHT - drawHeight / 2, drawWidth, drawHeight);\n    while (offset + gap <= Constants.CAMERA_WIDTH) {\n      this.batch.draw(cloud, offset + gap, Constants.CAMERA_HEIGHT - drawHeight / 2, drawWidth, drawHeight);\n      offset += drawWidth + gap;\n    }\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport {\n  Animation,\n  createAnimation,\n  createBatch,\n  createWhiteTexture,\n  PlayMode,\n  SpriteBatch,\n  Texture,\n  Viewport\n} from 'gdxjs';\nimport AssetManager from '../AssetManager';\nimport Constants from '../Constants';\nimport PlayerState from '../PlayerState';\nimport Star from '../Star';\n\nexport default class StarRenderSystem extends System {\n  @Inject('viewport')\n  viewport: Viewport;\n  @Inject('context')\n  gl: WebGLRenderingContext;\n  @Inject('stars')\n  stars: Array<Star>;\n  @Inject('assetManager')\n  assetManager: AssetManager;\n  @Inject('playerState')\n  playerState: PlayerState;\n\n  batch: SpriteBatch;\n  whiteTex: Texture;\n  starAnimation: Animation;\n  specialAnimations: Animation[];\n\n  initialized() {\n    this.batch = createBatch(this.gl);\n    this.whiteTex = createWhiteTexture(this.gl);\n    const atlas = this.assetManager.getAtlas('./object.atlas');\n    if (atlas) {\n      this.starAnimation = createAnimation(0.2, atlas.findRegions('star'));\n      this.specialAnimations = ['hand', 'feet', 'chest', 'star'].map(s => createAnimation(0.2, atlas.findRegions(s)));\n    }\n  }\n  elapsed = 0;\n  process(): void {\n    this.batch.setProjection(this.viewport.getCamera().combined);\n    this.batch.begin();\n    this.elapsed += this.world.delta;\n    for (let star of this.stars) {\n      const { x, y, active, special } = star;\n      if (!active) continue;\n      if (special) {\n        this.specialAnimations[this.playerState.getCurrentStateIndex()]\n          .getKeyFrame(this.elapsed, PlayMode.LOOP)\n          .draw(\n            this.batch,\n            x - Constants.STAR_SIZE / 2,\n            y - Constants.STAR_SIZE / 2,\n            Constants.STAR_SIZE,\n            Constants.STAR_SIZE,\n            Constants.STAR_SIZE / 2,\n            Constants.STAR_SIZE / 2,\n            0,\n            2,\n            2\n          );\n      } else {\n        this.starAnimation\n          .getKeyFrame(this.elapsed, PlayMode.LOOP)\n          .draw(\n            this.batch,\n            x - Constants.STAR_SIZE / 2,\n            y - Constants.STAR_SIZE / 2,\n            Constants.STAR_SIZE,\n            Constants.STAR_SIZE\n          );\n      }\n    }\n    this.batch.end();\n  }\n}\n","import { b2Contact, b2World } from 'box2d.ts';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { Inject, System } from 'flat-ecs';\nimport PlayerState from '../PlayerState';\nimport Star from '../Star';\n\nexport default class StarCollisionSystem extends System {\n  @Inject('physicsWorld')\n  physicsWorld: b2World;\n  @Inject('stars')\n  stars: Array<Star>;\n  @Inject('eventEmitter')\n  eventEmitter: EventEmitter;\n  @Inject('playerState')\n  playerState: PlayerState;\n  subscription: EventSubscription;\n  initialized() {\n    this.subscription = this.eventEmitter.addListener('beginContact', (contact: b2Contact) => {\n      let otherFixture, starFixture;\n      const fixA = contact.GetFixtureA();\n      const fixB = contact.GetFixtureB();\n      if (fixA.GetBody().GetUserData()?.type === 'star') {\n        otherFixture = fixB;\n        starFixture = fixA;\n      } else if (fixA.GetBody().GetUserData()?.type === 'star') {\n        otherFixture = fixA;\n        starFixture = fixB;\n      }\n      if (starFixture && otherFixture && otherFixture.GetBody().GetUserData()?.type === 'user') {\n        this.removeStar(starFixture.GetBody().GetUserData().starObject);\n      }\n    });\n  }\n  process(): void {}\n  removeStar(starObject: any) {\n    if (!starObject.active) {\n      return;\n    }\n    if (starObject.special) {\n      this.playerState.nextState();\n    }\n    starObject.active = false;\n  }\n  dispose() {\n    this.subscription.remove();\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport { Vector2 } from 'gdxjs';\nimport Alien from '../Alien';\nimport Constants from '../Constants';\nimport PlayerState from '../PlayerState';\n\nexport default class AlienSystem extends System {\n  @Inject('aliens')\n  aliens: Array<Alien>;\n  @Inject('playerPosition')\n  playerPos: Vector2;\n  @Inject('playerState')\n  playerState: PlayerState;\n\n  process(): void {\n    for (let i = this.aliens.length - 1; i >= 0; i--) {\n      const alien = this.aliens[i];\n\n      if (alien.time > 0) {\n        alien.time -= this.world.delta;\n        return;\n      }\n\n      if (!alien.hit) {\n        const { y: py } = this.playerPos;\n        if (alien.x <= Constants.GAP && alien.x + Constants.ALIEN_WIDTH >= Constants.GAP) {\n          if (alien.y <= py && alien.y + Constants.ALIEN_HEIGHT >= py) {\n            this.playerState.stunnedDuration = 0.2;\n            this.playerState.changeAction('hurt');\n            alien.hit = true;\n          }\n        }\n      }\n\n      alien.x -= Constants.ALIEN_SPEED * this.world.delta;\n\n      if (alien.x <= -Constants.ALIEN_WIDTH) {\n        this.aliens.splice(i, 1);\n      }\n    }\n  }\n}\n","import { Inject, System } from 'flat-ecs';\nimport { Animation, createAnimation, createBatch, OrthographicCamera, PlayMode, SpriteBatch } from 'gdxjs';\nimport Alien from '../Alien';\nimport AssetManager from '../AssetManager';\nimport Constants from '../Constants';\n\nexport default class AlienRenderSystem extends System {\n  @Inject('aliens')\n  aliens: Array<Alien>;\n  @Inject('fixedCamera')\n  fixedCamera: OrthographicCamera;\n  @Inject('context')\n  gl: WebGLRenderingContext;\n  @Inject('assetManager')\n  assetManager: AssetManager;\n\n  batch: SpriteBatch;\n\n  animations: Animation[] = [];\n\n  initialized() {\n    this.batch = createBatch(this.gl);\n\n    const atlas = this.assetManager.getAtlas('./main-char.atlas');\n    if (atlas) {\n      ['alien1', 'alien2', 'alien3'].forEach(s => this.animations.push(createAnimation(0.4, atlas.findRegions(s))));\n    }\n  }\n\n  elapsed = 0;\n  process(): void {\n    this.batch.setProjection(this.fixedCamera.combined);\n    this.batch.begin();\n    this.elapsed += this.world.delta;\n    for (let alien of this.aliens) {\n      this.animations[alien.type]\n        .getKeyFrame(Constants.ALIEN_SPAWNING_TIME - alien.time, PlayMode.NORMAL)\n        .draw(this.batch, alien.x, alien.y, Constants.ALIEN_WIDTH, Constants.ALIEN_HEIGHT);\n    }\n    this.batch.end();\n  }\n}\n","import {\n  createGameLoop,\n  createOrthoCamera,\n  createStage,\n  createViewport,\n  createViewportAwareInputHandler,\n  Vector2\n} from 'gdxjs';\nimport { b2World } from 'box2d.ts';\nimport { World } from 'flat-ecs';\nimport './index.css';\nimport Constants from './Constants';\nimport PhysicsSystem from './systems/PhysicsSystem';\nimport CameraMovementSystem from './systems/CameraMovementSystem';\nimport BlockGenerationSystem from './systems/BlockGenerationSystem';\nimport BlockRenderSystem from './systems/BlockRenderSystem';\nimport PlayerMovementSystem from './systems/PlayerMovementSystem';\nimport PlayerRenderSystem from './systems/PlayerRenderSystem';\nimport BlockRemovalSystem from './systems/BlockRemovalSystem';\nimport AssetManager from './AssetManager';\nimport PlayerState from './PlayerState';\nimport BackgroundRenderSystem from './systems/BackgroundRenderSystem';\nimport SmokeRenderSystem from './systems/SmokeRenderSystem';\n\nimport { EventEmitter } from 'fbemitter';\nimport Block from './Block';\nimport Star from './Star';\nimport StarRenderSystem from './systems/StarRenderSystem';\nimport StarCollisionSystem from './systems/StarCollisionSystem';\nimport Alien from './Alien';\nimport AlienSystem from './systems/AlienSystem';\nimport AlienRenderSystem from './systems/AlienRenderSystem';\n\nconst init = async () => {\n  const eventEmitter = new EventEmitter();\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const info = stage.getInfo();\n\n  const viewport = createViewport(canvas, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT, {\n    pixelRatio: 1\n  });\n  const gl = viewport.getContext();\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n\n  const fixedCamera = createOrthoCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT, canvas.width, canvas.height);\n  viewport.addCamera(fixedCamera);\n  viewport.update();\n\n  const assetManager = new AssetManager(gl);\n  assetManager.loadAtlas('./main-char.atlas');\n  assetManager.loadAtlas('./ground.atlas');\n  assetManager.loadAtlas('./object.atlas');\n  ['bg', 'city_01', 'city_02', 'cloud_01', 'cloud_02', 'smoke_01', 'smoke_02'].map(s =>\n    assetManager.loadTexture(`./background/${s}.png`)\n  );\n  info.innerHTML = `Loading...`;\n  await assetManager.finishLoading();\n\n  const createNewWorld = () => {\n    const blocks: Array<Block> = [];\n    const stars: Array<Star> = [];\n    const aliens: Array<Alien> = [];\n    const physicsWorld = new b2World({ x: 0, y: Constants.GRAVITY });\n    const gameWorld = new World();\n    const playerState = new PlayerState();\n    const playerPosition = new Vector2(0, 0);\n    viewport.getCamera().setPosition(0, 0);\n\n    gameWorld.register('context', gl);\n    gameWorld.register('physicsWorld', physicsWorld);\n    gameWorld.register('viewport', viewport);\n    gameWorld.register('blocks', blocks);\n    gameWorld.register('stars', stars);\n    gameWorld.register('aliens', aliens);\n    gameWorld.register('playerPosition', playerPosition);\n    gameWorld.register('inputHandler', inputHandler);\n    gameWorld.register('assetManager', assetManager);\n    gameWorld.register('playerState', playerState);\n    gameWorld.register('fixedCamera', fixedCamera);\n    gameWorld.register('eventEmitter', eventEmitter);\n\n    gameWorld.addSystem(new BlockGenerationSystem());\n    gameWorld.addSystem(new PlayerMovementSystem());\n    gameWorld.addSystem(new BlockRemovalSystem());\n    gameWorld.addSystem(new StarCollisionSystem());\n    gameWorld.addSystem(new AlienSystem());\n    gameWorld.addSystem(new PhysicsSystem());\n\n    gameWorld.addSystem(new CameraMovementSystem(), false);\n    gameWorld.addSystem(new BackgroundRenderSystem(), false);\n    gameWorld.addSystem(new BlockRenderSystem(), false);\n    gameWorld.addSystem(new StarRenderSystem(), false);\n    gameWorld.addSystem(new AlienRenderSystem(), false);\n    gameWorld.addSystem(new PlayerRenderSystem(), false);\n    gameWorld.addSystem(new SmokeRenderSystem(), false);\n    return gameWorld;\n  };\n\n  let gameWorld = createNewWorld();\n  let gameOver = false;\n\n  eventEmitter.addListener('gameOver', () => {\n    gameOver = true;\n    gameWorld.dispose();\n    setTimeout(() => {\n      gameWorld = createNewWorld();\n      gameOver = false;\n    }, 100);\n  });\n\n  gl.clearColor(0, 0, 0, 1);\n  const loop = createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gameWorld.setDelta(delta);\n    !gameOver && gameWorld.processActiveSystem();\n    gameWorld.processPassiveSystem();\n  });\n\n  setInterval(() => (info.innerHTML = `FPS: ${loop.getFps()}`), 500);\n};\n\ninit();\n"],"sourceRoot":""}